<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>久坐提醒工具</title>
    <link href="/2025/03/18/set/"/>
    <url>/2025/03/18/set/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>检测用户鼠标和键盘活动，如果鼠标在移动或者键盘正在打字，就开始计时，时间满三十分钟就弹出消息框，内容是“工作太久，该休息啦！”，如果中途鼠标停止移动并且键盘停止打字，就重置计时器为0。当检测到鼠标在移动或者键盘正在打字时，重新开始计时。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pynput <span class="hljs-keyword">import</span> mouse, keyboard<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> ctypes<br><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<br><br><span class="hljs-comment"># 全局变量配置 打包命令：pyinstaller --noconsole --onefile --hidden-import=pynput.keyboard._win32 --hidden-import=pynput.mouse._win32 set.py</span><br>INACTIVITY_THRESHOLD = <span class="hljs-number">5</span>*<span class="hljs-number">60</span>  <span class="hljs-comment"># 无操作重置时间</span><br>TARGET_DURATION = <span class="hljs-number">30</span> * <span class="hljs-number">60</span>  <span class="hljs-comment"># 提醒休息时间</span><br>last_activity_time = time.time()<br>active_start_time = <span class="hljs-literal">None</span>  <span class="hljs-comment"># 初始化为 None</span><br>lock = threading.Lock()<br>elapsed=<span class="hljs-number">0</span><br><span class="hljs-comment"># 更新图形界面显示</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_display</span>():<br><span class="hljs-keyword">global</span> elapsed<br>time_label.config(text=<span class="hljs-string">f&quot;已经活动了：<span class="hljs-subst">&#123;elapsed:<span class="hljs-number">.2</span>f&#125;</span> 秒&quot;</span>)<br>root.after(<span class="hljs-number">1000</span>, update_display)  <span class="hljs-comment"># 每秒更新一次显示</span><br><span class="hljs-comment"># 更新无操作重置时间和提醒休息时间</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_parameters</span>():<br><span class="hljs-keyword">global</span> INACTIVITY_THRESHOLD, TARGET_DURATION<br><span class="hljs-keyword">try</span>:<br><span class="hljs-comment"># 获取用户输入</span><br>inactive_threshold_min = <span class="hljs-built_in">float</span>(inactive_entry.get())<br>target_duration_min = <span class="hljs-built_in">float</span>(target_entry.get())<br><br><span class="hljs-comment"># 转换为秒</span><br>INACTIVITY_THRESHOLD = inactive_threshold_min * <span class="hljs-number">60</span><br>TARGET_DURATION = target_duration_min * <span class="hljs-number">60</span><br><br>status_label.config(text=<span class="hljs-string">&quot;参数已更新！&quot;</span>, fg=<span class="hljs-string">&quot;green&quot;</span>)<br><span class="hljs-keyword">except</span> ValueError:<br>status_label.config(text=<span class="hljs-string">&quot;输入无效，请输入数字！&quot;</span>, fg=<span class="hljs-string">&quot;red&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_activity</span>():<br><span class="hljs-string">&quot;&quot;&quot;更新用户最后活动时间并管理活动状态&quot;&quot;&quot;</span><br><span class="hljs-keyword">global</span> last_activity_time, active_start_time<br>current_time = time.time()<br><span class="hljs-keyword">with</span> lock:<br>last_activity_time = current_time<br><span class="hljs-keyword">if</span> active_start_time <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>active_start_time = current_time<br><br><span class="hljs-comment"># 鼠标事件处理</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_move</span>(<span class="hljs-params">x, y</span>):<br>update_activity()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_click</span>(<span class="hljs-params">x, y, button, pressed</span>):<br>update_activity()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_scroll</span>(<span class="hljs-params">x, y, dx, dy</span>):<br>update_activity()<br><br><span class="hljs-comment"># 键盘事件处理</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_press</span>(<span class="hljs-params">key</span>):<br>update_activity()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_release</span>(<span class="hljs-params">key</span>):<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">activity_monitor</span>():<br><span class="hljs-string">&quot;&quot;&quot;持续监测用户活动状态的线程&quot;&quot;&quot;</span><br><span class="hljs-keyword">global</span> last_activity_time, active_start_time,elapsed<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>current_time = time.time()<br><span class="hljs-keyword">with</span> lock:<br>inactive_time = current_time - last_activity_time<br><br><span class="hljs-comment"># 计算无操作时间</span><br><span class="hljs-keyword">if</span> inactive_time &gt; INACTIVITY_THRESHOLD:<br>activity_state_time = <span class="hljs-literal">None</span><br>active_start_time= <span class="hljs-literal">None</span><br>elapsed=<span class="hljs-number">0</span><br><span class="hljs-keyword">else</span>:<br>activity_state_time = active_start_time <span class="hljs-keyword">if</span> active_start_time <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> current_time<br><br><span class="hljs-comment"># 确保 active_start_time 被正确初始化</span><br><span class="hljs-keyword">if</span> activity_state_time <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> inactive_time &lt;= INACTIVITY_THRESHOLD:<br>activity_state_time = current_time<br><br><span class="hljs-comment"># 处理活动状态</span><br><span class="hljs-keyword">if</span> activity_state_time <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>elapsed = current_time - activity_state_time<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;已经活动了：<span class="hljs-subst">&#123;elapsed:<span class="hljs-number">.2</span>f&#125;</span> 秒&quot;</span>)  <span class="hljs-comment"># 打印已活动时间</span><br><span class="hljs-keyword">if</span> elapsed &gt;= TARGET_DURATION:<br><span class="hljs-comment"># 显示系统弹窗</span><br>ctypes.windll.user32.MessageBoxW(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;工作太久，该休息啦！&quot;</span>, <span class="hljs-string">&quot;健康提醒&quot;</span>, <span class="hljs-number">0x40</span>)<br>activity_state_time = <span class="hljs-literal">None</span><br>active_start_time= <span class="hljs-literal">None</span><br>elapsed=<span class="hljs-number">0</span><br><br>time.sleep(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 每秒检查一次</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>root = tk.Tk()<br>root.title(<span class="hljs-string">&quot;久坐提醒&quot;</span>)<br><br><span class="hljs-comment"># 设置窗口大小</span><br>root.geometry(<span class="hljs-string">&quot;300x200&quot;</span>)<br>tk.Label(root, text=<span class="hljs-string">&quot;无操作重置时间（min）&quot;</span>).grid(row=<span class="hljs-number">0</span>, column=<span class="hljs-number">0</span>, padx=<span class="hljs-number">10</span>, pady=<span class="hljs-number">10</span>)<br>inactive_entry = tk.Entry(root)<br>inactive_entry.grid(row=<span class="hljs-number">0</span>, column=<span class="hljs-number">1</span>, padx=<span class="hljs-number">10</span>, pady=<span class="hljs-number">10</span>)<br>inactive_entry.insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;5&quot;</span>)  <span class="hljs-comment"># 默认值</span><br>tk.Label(root, text=<span class="hljs-string">&quot;提醒休息时间（min）&quot;</span>).grid(row=<span class="hljs-number">1</span>, column=<span class="hljs-number">0</span>, padx=<span class="hljs-number">10</span>, pady=<span class="hljs-number">10</span>)<br>target_entry = tk.Entry(root)<br>target_entry.grid(row=<span class="hljs-number">1</span>, column=<span class="hljs-number">1</span>, padx=<span class="hljs-number">10</span>, pady=<span class="hljs-number">10</span>)<br>target_entry.insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;30&quot;</span>)  <span class="hljs-comment"># 默认值</span><br><span class="hljs-comment"># 更新按钮</span><br>update_button = tk.Button(root, text=<span class="hljs-string">&quot;更新设置&quot;</span>, command=update_parameters)<br>update_button.grid(row=<span class="hljs-number">2</span>, column=<span class="hljs-number">0</span>, columnspan=<span class="hljs-number">2</span>, pady=<span class="hljs-number">10</span>)<br>  <span class="hljs-comment"># 状态标签</span><br>status_label = tk.Label(root, text=<span class="hljs-string">&quot;&quot;</span>, fg=<span class="hljs-string">&quot;black&quot;</span>)<br>status_label.grid(row=<span class="hljs-number">3</span>, column=<span class="hljs-number">0</span>, columnspan=<span class="hljs-number">2</span>, pady=<span class="hljs-number">5</span>)<br><span class="hljs-comment"># 时间显示标签</span><br>time_label = tk.Label(root, text=<span class="hljs-string">f&quot;已经活动了：<span class="hljs-subst">&#123;elapsed:<span class="hljs-number">.2</span>f&#125;</span> 秒&quot;</span>, fg=<span class="hljs-string">&quot;blue&quot;</span>, font=(<span class="hljs-string">&quot;Arial&quot;</span>, <span class="hljs-number">12</span>))<br>time_label.grid(row=<span class="hljs-number">4</span>, column=<span class="hljs-number">0</span>, columnspan=<span class="hljs-number">2</span>, pady=<span class="hljs-number">10</span>)<br><span class="hljs-comment"># 启动输入设备监听</span><br>mouse_listener = mouse.Listener(on_move=on_move, on_click=on_click, on_scroll=on_scroll)<br>keyboard_listener = keyboard.Listener(on_press=on_press, on_release=on_release)<br><br>mouse_listener.start()<br>keyboard_listener.start()<br><br><span class="hljs-comment"># 启动监控线程</span><br>monitor_thread = threading.Thread(target=activity_monitor, daemon=<span class="hljs-literal">True</span>)<br>monitor_thread.start()<br>   <span class="hljs-comment"># 初始化显示</span><br>update_display()<br><br><span class="hljs-comment"># 启动主循环</span><br><span class="hljs-keyword">try</span>:<br>root.mainloop()<br><span class="hljs-keyword">except</span> KeyboardInterrupt:<br>mouse_listener.stop()<br>keyboard_listener.stop()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;程序已安全退出&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自动化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>批量PDF翻译工具</title>
    <link href="/2025/03/18/pdf2txt/"/>
    <url>/2025/03/18/pdf2txt/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="程序功能"><a href="#程序功能" class="headerlink" title="程序功能"></a>程序功能</h2><p>把上百份包含图片的PDF翻译成中文文档，并保存为txt文件。</p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ol start="0"><li>用户导入需翻译的PDF所在文件夹路径</li><li>把PDF每一页保存为图片</li><li>对每一张图片使用OCR工具提取文字，分别保存为txt</li><li>把所有txt汇总</li><li>用户输入AI的API密钥、地址和模型名</li><li>切割txt，每一份3万字</li><li>使用AI翻译每一份txt</li><li>汇总txt，保存为新的txt文件</li></ol><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ol><li>安装库<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> PyMuPDF pillow pytesseract<br></code></pre></td></tr></table></figure></li><li>安装OCR工具</li></ol><ul><li>Windows：从<a href="https://github.com/UB-Mannheim/tesseract/wiki">Tesseract官网</a>下载安装</li><li>Mac：<code>brew install tesseract</code></li><li>Linux：<code>sudo apt install tesseract-ocr</code></li><li>下载完自己配置环境变量</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> fitz  <span class="hljs-comment"># PyMuPDF</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> pytesseract<br><span class="hljs-keyword">import</span> glob<br><br><span class="hljs-comment"># 资源路径处理（用于打包exe）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">resource_path</span>(<span class="hljs-params">relative_path</span>):<br>    <span class="hljs-keyword">try</span>:<br>        base_path = sys._MEIPASS<br>    <span class="hljs-keyword">except</span> Exception:<br>        base_path = os.path.abspath(<span class="hljs-string">&quot;.&quot;</span>)<br>    <span class="hljs-keyword">return</span> os.path.join(base_path, relative_path)<br><br><span class="hljs-comment"># 设置OCR环境路径</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_ocr_env</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">getattr</span>(sys, <span class="hljs-string">&#x27;frozen&#x27;</span>, <span class="hljs-literal">False</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;检测到打包环境，正在设置Tesseract路径...&quot;</span>)<br>        <span class="hljs-comment"># 设置Tesseract路径</span><br>        tess_dir = resource_path(<span class="hljs-string">&#x27;tesseract&#x27;</span>)<br>        os.environ[<span class="hljs-string">&quot;PATH&quot;</span>] += os.pathsep + tess_dir<br>        pytesseract.pytesseract.tesseract_cmd = resource_path(<span class="hljs-string">r&#x27;tesseract\tesseract.exe&#x27;</span>)<br>        <span class="hljs-comment"># 设置语言包路径</span><br>        os.environ[<span class="hljs-string">&#x27;TESSDATA_PREFIX&#x27;</span>] = resource_path(<span class="hljs-string">&#x27;tessdata&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Tesseract路径设置为: <span class="hljs-subst">&#123;pytesseract.pytesseract.tesseract_cmd&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_pdfs</span>(<span class="hljs-params">path</span>):<br>    setup_ocr_env()<br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n正在扫描目录: <span class="hljs-subst">&#123;path&#125;</span>&quot;</span>)<br>    pdf_files = <span class="hljs-built_in">sorted</span>(glob.glob(os.path.join(path, <span class="hljs-string">&#x27;*.pdf&#x27;</span>)))<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pdf_files:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;未找到PDF文件！&quot;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;找到 <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(pdf_files)&#125;</span> 个PDF文件:&quot;</span>)<br>    [<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;• <span class="hljs-subst">&#123;os.path.basename(f)&#125;</span>&quot;</span>) <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> pdf_files]<br><br>    txt_files = []<br>    <br>    <span class="hljs-keyword">for</span> pdf_file <span class="hljs-keyword">in</span> pdf_files:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n正在处理文件: <span class="hljs-subst">&#123;os.path.basename(pdf_file)&#125;</span>&quot;</span>)<br>            doc = fitz.<span class="hljs-built_in">open</span>(pdf_file)<br>            base_name = os.path.splitext(os.path.basename(pdf_file))[<span class="hljs-number">0</span>]<br>            total_pages = <span class="hljs-built_in">len</span>(doc)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;总页数: <span class="hljs-subst">&#123;total_pages&#125;</span>&quot;</span>)<br><br>            <span class="hljs-keyword">for</span> page_num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(total_pages):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n处理第 <span class="hljs-subst">&#123;page_num+<span class="hljs-number">1</span>&#125;</span>/<span class="hljs-subst">&#123;total_pages&#125;</span> 页...&quot;</span>)<br>                page = doc.load_page(page_num)<br>                <br>                <span class="hljs-comment"># 生成高清图片</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在转换PDF为PNG...&quot;</span>)<br>                mat = fitz.Matrix(<span class="hljs-number">300</span>/<span class="hljs-number">72</span>, <span class="hljs-number">300</span>/<span class="hljs-number">72</span>)  <span class="hljs-comment"># 300dpi</span><br>                pix = page.get_pixmap(matrix=mat)<br>                img_path = os.path.join(path, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;base_name&#125;</span>_<span class="hljs-subst">&#123;page_num+<span class="hljs-number">1</span>&#125;</span>.png&quot;</span>)<br>                pix.save(img_path)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;临时图片已保存: <span class="hljs-subst">&#123;img_path&#125;</span>&quot;</span>)<br><br>                <span class="hljs-comment"># OCR识别</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在进行OCR识别...&quot;</span>)<br>                <span class="hljs-keyword">try</span>:<br>                    text = pytesseract.image_to_string(<br>                        Image.<span class="hljs-built_in">open</span>(img_path),<br>                        lang=<span class="hljs-string">&#x27;chi_sim+eng&#x27;</span>  <span class="hljs-comment"># 中英文识别</span><br>                    )<br>                <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;OCR识别失败: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>                    text = <span class="hljs-string">&quot;&quot;</span><br>                <br>                <span class="hljs-comment"># 保存文本</span><br>                txt_path = os.path.join(path, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;base_name&#125;</span>_<span class="hljs-subst">&#123;page_num+<span class="hljs-number">1</span>&#125;</span>.txt&quot;</span>)<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(txt_path, <span class="hljs-string">&quot;w&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>                    f.write(text)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;文本已保存: <span class="hljs-subst">&#123;txt_path&#125;</span>&quot;</span>)<br>                txt_files.append(txt_path)<br><br>                <span class="hljs-comment"># 清理临时图片</span><br>                os.remove(img_path)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;临时图片已删除&quot;</span>)<br><br>            doc.close()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;文件处理完成: <span class="hljs-subst">&#123;os.path.basename(pdf_file)&#125;</span>&quot;</span>)<br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;处理文件时发生错误: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">continue</span><br><br>    <span class="hljs-comment"># 合并文本文件</span><br>    <span class="hljs-keyword">if</span> txt_files:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n开始合并文本文件...&quot;</span>)<br>        summary_path = os.path.join(path, <span class="hljs-string">&quot;文字提取汇总.txt&quot;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(summary_path, <span class="hljs-string">&quot;w&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> outfile:<br>                total = <span class="hljs-built_in">len</span>(txt_files)<br>                <span class="hljs-keyword">for</span> i, txt_file <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(txt_files):<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;合并进度: <span class="hljs-subst">&#123;i+<span class="hljs-number">1</span>&#125;</span>/<span class="hljs-subst">&#123;total&#125;</span> - <span class="hljs-subst">&#123;os.path.basename(txt_file)&#125;</span>&quot;</span>)<br>                    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(txt_file, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> infile:<br>                        outfile.write(<span class="hljs-string">f&quot;=== <span class="hljs-subst">&#123;os.path.basename(txt_file)&#125;</span> ===\n&quot;</span>)<br>                        outfile.write(infile.read())<br>                        outfile.write(<span class="hljs-string">&quot;\n\n&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;合并完成！汇总文件: <span class="hljs-subst">&#123;summary_path&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;合并文件时出错: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有可合并的文本文件&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=== PDF文字提取工具 ===&quot;</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        path = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\n请输入文件目录路径: &quot;</span>).strip()<br>        <span class="hljs-keyword">if</span> os.path.isdir(path):<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;错误：目录不存在，请重新输入！&quot;</span>)<br>    <br>    process_pdfs(path)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n所有处理已完成！按回车键退出...&quot;</span>)<br>    <span class="hljs-built_in">input</span>()<br><br></code></pre></td></tr></table></figure><h1 id="打包为pdf转文字-exe"><a href="#打包为pdf转文字-exe" class="headerlink" title="打包为pdf转文字.exe"></a>打包为pdf转文字.exe</h1><ol><li>安装打包工具<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> pyinstaller<br></code></pre></td></tr></table></figure></li><li>创建打包批处理文件<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">@<span class="hljs-keyword">echo</span> off<br>pyinstaller <span class="hljs-params">--onefile</span> ^<br> <span class="hljs-params">--add-data</span> <span class="hljs-string">&quot;tesseract;tesseract&quot;</span> ^<br> <span class="hljs-params">--add-data</span> <span class="hljs-string">&quot;tessdata;tessdata&quot;</span> ^<br> <span class="hljs-params">--hidden-import</span> PIL._tkinter_finder ^<br> <span class="hljs-params">--runtime-tmpdir</span> <span class="hljs-string">&quot;.&quot;</span> ^<br> <span class="hljs-params">--name</span> <span class="hljs-string">&quot;PDF_OCR_Tool&quot;</span> ^<br> pdf2txt.py<br><br><span class="hljs-keyword">echo</span> 打包完成！按任意键退出<span class="hljs-string">...</span><br>pause<br></code></pre></td></tr></table></figure></li><li>目录结构准备<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nix">your_project<span class="hljs-symbol">/</span><br>├── tesseract<span class="hljs-symbol">/</span>          <span class="hljs-comment"># 从Tesseract安装目录复制</span><br>│   ├── tesseract.exe<br>│   ├── <span class="hljs-operator">*</span>.dll<br>├── tessdata<span class="hljs-symbol">/</span>           <span class="hljs-comment"># 语言包目录</span><br>│   ├── chi_sim.traineddata  <span class="hljs-comment"># 中文包</span><br>│   └── eng.traineddata      <span class="hljs-comment"># 英文包</span><br>└── pdf_ocr_tool.py<br></code></pre></td></tr></table></figure></li><li>运行bat文件，生成exe</li></ol><h1 id="切割并使用AI翻译"><a href="#切割并使用AI翻译" class="headerlink" title="切割并使用AI翻译"></a>切割并使用AI翻译</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">translate_chunk</span>(<span class="hljs-params">text, api_key, api_base, model_name</span>):<br>headers = &#123;<br><span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">&#123;api_key&#125;</span>&quot;</span>,<br><span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span><br>&#125;<br><br>payload = &#123;<br><span class="hljs-string">&quot;model&quot;</span>: model_name,<br><span class="hljs-string">&quot;messages&quot;</span>: [&#123;<br><span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>,<br><span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">f&quot;将以下内容准确翻译成中文，保持原有格式不变：\n<span class="hljs-subst">&#123;text&#125;</span>&quot;</span><br>&#125;],<br><span class="hljs-string">&quot;temperature&quot;</span>: <span class="hljs-number">0.1</span><br>&#125;<br><br><span class="hljs-keyword">try</span>:<br>response = requests.post(api_base, headers=headers, json=payload)<br>response.raise_for_status()<br><span class="hljs-keyword">return</span> response.json()[<span class="hljs-string">&#x27;choices&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;content&#x27;</span>]<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br><span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">f&quot;API调用失败: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">split_text</span>(<span class="hljs-params">text, max_length=<span class="hljs-number">30000</span></span>):<br><span class="hljs-keyword">return</span> [text[i:i+max_length] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(text), max_length)]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><span class="hljs-comment"># 获取用户输入（带默认值）</span><br>api_key = <span class="hljs-built_in">input</span>(<span class="hljs-string">f&quot;请输入API密钥（默认：api123123）: &quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;api123123&quot;</span><br>api_base = <span class="hljs-built_in">input</span>(<span class="hljs-string">f&quot;请输入API地址（默认：1.1.1.1）: &quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;1.1.1.1&quot;</span><br>model_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">f&quot;请输入模型名称（默认：deepseek32b）: &quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;deepseek32b&quot;</span><br>file_path = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要翻译的文件路径: &quot;</span>)<br><br><span class="hljs-comment"># 读取源文件</span><br><span class="hljs-keyword">try</span>:<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>content = f.read()<br><span class="hljs-keyword">except</span> FileNotFoundError:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;错误：文件 <span class="hljs-subst">&#123;file_path&#125;</span> 不存在&quot;</span>)<br><span class="hljs-keyword">return</span><br><br><span class="hljs-comment"># 分块处理</span><br>chunks = split_text(content)<br>translated = []<br><br><span class="hljs-comment"># 逐块翻译</span><br><span class="hljs-keyword">for</span> i, chunk <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(chunks, <span class="hljs-number">1</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;正在处理第 <span class="hljs-subst">&#123;i&#125;</span>/<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(chunks)&#125;</span> 块（约<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(chunk)&#125;</span>字）...&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>translated_chunk = translate_chunk(chunk, api_key, api_base, model_name)<br>translated.append(translated_chunk)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;处理第 <span class="hljs-subst">&#123;i&#125;</span> 块时出错: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br><span class="hljs-keyword">return</span><br><br><span class="hljs-comment"># 保存结果</span><br>base_name = os.path.basename(file_path)<br>output_path = os.path.splitext(base_name)[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;_翻译.txt&quot;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_path, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>f.write(<span class="hljs-string">&#x27;&#x27;</span>.join(translated))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n翻译完成！结果已保存至：<span class="hljs-subst">&#123;output_path&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>main()<br></code></pre></td></tr></table></figure><h1 id="再打包成文字翻译-exe"><a href="#再打包成文字翻译-exe" class="headerlink" title="再打包成文字翻译.exe"></a>再打包成文字翻译.exe</h1><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">pyinstaller <span class="hljs-comment">--onefile  xx.py</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自动化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用python实现每日数据播报</title>
    <link href="/2025/01/23/%E7%94%A8python%E5%AE%9E%E7%8E%B0%E6%AF%8F%E6%97%A5%E6%95%B0%E6%8D%AE%E6%92%AD%E6%8A%A5/"/>
    <url>/2025/01/23/%E7%94%A8python%E5%AE%9E%E7%8E%B0%E6%AF%8F%E6%97%A5%E6%95%B0%E6%8D%AE%E6%92%AD%E6%8A%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>为了工作，我每天都要在多个网站上查看各种数据，既耗时又麻烦。于是，我用 Python 写了一个爬虫程序，让它在每个工作日自动抓取重要数据并推送到我的手机上，效率瞬间提升了不少。</p><h1 id="选择方案"><a href="#选择方案" class="headerlink" title="选择方案"></a>选择方案</h1><p>询问kimi</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">我想让<span class="hljs-keyword">python</span>每天自动将消息推送到我的手机，我没有固定IP和域名，我不想付费，除了企业微信，还有哪些方案?<span class="hljs-comment">&quot;</span><br></code></pre></td></tr></table></figure><p>kimi给了三个方案:PushPlus、钉钉机器人、Notifywind、ntfy.py<br>我选择钉钉机器人，感觉最简单</p><h1 id="创建钉钉机器人"><a href="#创建钉钉机器人" class="headerlink" title="创建钉钉机器人"></a>创建钉钉机器人</h1><ol><li>打开钉钉，创建一个钉钉群用于接收推送消息</li><li>点击群设置，选择“智能群助手”。</li><li>点击“添加机器人”，选择“自定义”。</li><li>设置机器人名称，并选择安全设置（推荐使用“自定义关键词”或“加签”）。</li><li>添加完成后，复制 Webhook 地址，这是后续代码中需要使用的接口地址。</li></ol><h1 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h1><h2 id="让机器人发送当前时间"><a href="#让机器人发送当前时间" class="headerlink" title="让机器人发送当前时间"></a>让机器人发送当前时间</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs perl">def run():<br><span class="hljs-comment"># 钉钉机器人 Webhook 地址</span><br>WEBHOOK_URL = <span class="hljs-string">&quot;https://oapi.dingtalk.com/robot/send?access_token=xxx&quot;</span>  <span class="hljs-comment"># 替换为您的 Webhook 地址</span><br><br>def send_dingtalk_message(content):<br>headers = &#123;<br><span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span><br>&#125;<br>data = &#123;<br><span class="hljs-string">&quot;msgtype&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br><span class="hljs-string">&quot;text&quot;</span>: &#123;<br><span class="hljs-string">&quot;content&quot;</span>: content<br>&#125;<br>&#125;<br>response = requests.post(WEBHOOK_URL, headers=headers, data=json.dumps(data))<br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;消息发送成功：&quot;</span>, response.json())<br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;消息发送失败：&quot;</span>, response.text)<br><br><span class="hljs-keyword">time</span> = datetime.now().strftime(<span class="hljs-string">&quot;<span class="hljs-variable">%Y</span>-<span class="hljs-variable">%m</span>-<span class="hljs-variable">%d</span> <span class="hljs-variable">%H</span>:<span class="hljs-variable">%M</span>:<span class="hljs-variable">%S</span>&quot;</span>)<br>message_content =<span class="hljs-string">&quot;hi\n现在是&quot;</span>+<span class="hljs-keyword">time</span>+<span class="hljs-string">&quot;\n&quot;</span><br>send_dingtalk_message(message_content)<br><br></code></pre></td></tr></table></figure><h2 id="让机器人每个工作日发送消息"><a href="#让机器人每个工作日发送消息" class="headerlink" title="让机器人每个工作日发送消息"></a>让机器人每个工作日发送消息</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs applescript">def is_weekday():<br>today = datetime.today().<span class="hljs-built_in">weekday</span>()  <span class="hljs-comment"># 获取今天是星期几（0=周一，6=周日）</span><br><span class="hljs-built_in">return</span> today &lt; <span class="hljs-number">5</span>  <span class="hljs-comment"># 如果今天是周一到周五，返回 True</span><br><br>def schedule_task():<br><span class="hljs-keyword">if</span> is_weekday():<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> schedule.get_jobs():  <span class="hljs-comment"># 如果没有任务</span><br>schedule.<span class="hljs-keyword">every</span>().<span class="hljs-built_in">day</span>.<span class="hljs-keyword">at</span>(<span class="hljs-string">&quot;10:17&quot;</span>).do(<span class="hljs-built_in">run</span>)<br><span class="hljs-keyword">else</span>:<br>schedule.clear()  <span class="hljs-comment"># 如果是周末，清除任务</span><br><br><span class="hljs-comment"># 保持程序运行</span><br><span class="hljs-keyword">while</span> True:<br>schedule_task()  <br>schedule.run_pending()  <span class="hljs-comment"># 检查是否有待运行的任务</span><br><span class="hljs-built_in">time</span>.sleep(<span class="hljs-number">60</span>)  <span class="hljs-comment"># 每分钟检查一次，避免频繁占用 CPU</span><br></code></pre></td></tr></table></figure><p>结合前期写的爬虫，即可实现定时推送重要数据，解放双手</p>]]></content>
    
    
    <categories>
      
      <category>自动化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+Github搭建免费博客（全网最细）</title>
    <link href="/2025/01/09/%E6%95%99%E7%A8%8B/"/>
    <url>/2025/01/09/%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="0-简介"><a href="#0-简介" class="headerlink" title="0.简介"></a>0.简介</h1><ul><li>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</li><li>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</li><li>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。（注意，在GitHub上没有存储你的md文件）</li></ul><h1 id="1-配置环境"><a href="#1-配置环境" class="headerlink" title="1.配置环境"></a>1.配置环境</h1><p>安装Node.js和git</p><ul><li><a href="https://nodejs.org/zh-cn">Node.js下载地址</a></li><li><a href="https://git-scm.com/downloads">Git下载地址</a></li></ul><h1 id="2-连接GitHub"><a href="#2-连接GitHub" class="headerlink" title="2.连接GitHub"></a>2.连接GitHub</h1><ol><li><a href="https://github.com/">注册GitHub账号</a></li><li>右键 -&gt; Git Bash Here , 设置用户名和邮箱（在自己电脑，随便找个地方，因为是全局<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;GitHub 用户名&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;GitHub 邮箱&quot;</span><br></code></pre></td></tr></table></figure></li><li>创建 SSH 密钥*：输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。获取生成了密钥。</li><li>添加密钥<br> 进入 C:\Users\用户名.ssh目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。<br> 登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。<br> Title 随便取个名字，粘贴复制的内容到 Key 中，点击 Add SSH key 完成添加。</li><li>验证连接：<br> 打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</li></ol><h1 id="3-创建-Github-仓库"><a href="#3-创建-Github-仓库" class="headerlink" title="3.创建 Github 仓库"></a>3.创建 Github 仓库</h1><p><img src="https://picx.zhimg.com/v2-67a8165154f4c5f4a6333e76e78ed815_1440w.jpg" alt="创建Github 仓库"></p><h1 id="4-安装-Hexo"><a href="#4-安装-Hexo" class="headerlink" title="4.安装 Hexo"></a>4.安装 Hexo</h1><ul><li>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。</li><li>使用 npm 一键安装 Hexo 博客程序<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure></li><li>初始化并安装所需组件：</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">hexo init      <span class="hljs-comment"># 初始化</span><br>npm <span class="hljs-keyword">install</span>    <span class="hljs-comment"># 安装组件</span><br></code></pre></td></tr></table></figure><ul><li>完成后依次输入下面命令，*启动本地服务器进行预览：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> g   <span class="hljs-comment"># 生成页面</span><br>hexo s   <span class="hljs-comment"># 启动预览</span><br></code></pre></td></tr></table></figure><ul><li>访问<code> http://localhost:4000</code>出现 Hexo 默认页面，本地博客安装成功</li></ul><h1 id="5-部署-Hexo-到-GitHub"><a href="#5-部署-Hexo-到-GitHub" class="headerlink" title="5.部署 Hexo 到 GitHub"></a>5.部署 Hexo 到 GitHub</h1><ol><li>首安装 hexo-deployer-git：</li></ol><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><ol start="2"><li>修改 _config.yml文件末尾的 Deployment 部分，修改成如下：<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@github.com:用户名/用户名.github.io.git<br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure></li></ol><p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p><p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p><h1 id="6-开始使用"><a href="#6-开始使用" class="headerlink" title="6.开始使用"></a>6.开始使用</h1><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。<br>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。以后每次发布文章都是这两条命令。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> g   <span class="hljs-comment"># 生成页面</span><br>hexo d   <span class="hljs-comment"># 部署发布</span><br></code></pre></td></tr></table></figure><p>在md文件的开头部分可以设置文章的标题、日期、分类、标签等。本篇文章的设置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hexo+Github搭建免费博客（全网最细）#</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2025-01-09 21:51:04</span><span class="hljs-comment"># 时间</span><br><span class="hljs-attr">toc:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 开启目录</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">搭建网站#</span> <span class="hljs-string">分类</span><br><span class="hljs-attr">tags:</span> <span class="hljs-string">hexo#</span> <span class="hljs-string">标签</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h2 id="网站设置"><a href="#网站设置" class="headerlink" title="网站设置"></a>网站设置</h2><p>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考<a href="https://hexo.io/zh-cn/docs/configuration">官方文档</a>按需要编辑。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li>Hexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 <code>&lt;!--more--&gt;</code> 进行分段。<br>该代码前面的内容会作为摘要显示，而后面的内容会替换为 “Read More” 隐藏起来。</li><li>修改配置文件的时候注意冒号后面要加空格</li><li>如果更改配置没有生效，<code>hexo cl</code>清理后重新部署</li><li>其他奇怪问题可以直接问AI</li></ol><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>参考主题官方文档按需要编辑。<br>例如<a href="https://fluid-dev.github.io/hexo-fluid-docs/start/">Fluid主题</a>。</p>]]></content>
    
    
    <categories>
      
      <category>搭建网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
