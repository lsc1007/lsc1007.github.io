<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>用python实现每日数据播报</title>
    <link href="/2025/01/23/%E7%94%A8python%E5%AE%9E%E7%8E%B0%E6%AF%8F%E6%97%A5%E6%95%B0%E6%8D%AE%E6%92%AD%E6%8A%A5/"/>
    <url>/2025/01/23/%E7%94%A8python%E5%AE%9E%E7%8E%B0%E6%AF%8F%E6%97%A5%E6%95%B0%E6%8D%AE%E6%92%AD%E6%8A%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>为了工作，我每天都要在多个网站上查看各种数据，既耗时又麻烦。于是，我用 Python 写了一个爬虫程序，让它在每个工作日自动抓取重要数据并推送到我的手机上，效率瞬间提升了不少。</p><h1 id="选择方案"><a href="#选择方案" class="headerlink" title="选择方案"></a>选择方案</h1><p>询问kimi</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">我想让<span class="hljs-keyword">python</span>每天自动将消息推送到我的手机，我没有固定IP和域名，我不想付费，除了企业微信，还有哪些方案?<span class="hljs-comment">&quot;</span><br></code></pre></td></tr></table></figure><p>kimi给了三个方案:PushPlus、钉钉机器人、Notifywind、ntfy.py<br>我选择钉钉机器人，感觉最简单</p><h1 id="创建钉钉机器人"><a href="#创建钉钉机器人" class="headerlink" title="创建钉钉机器人"></a>创建钉钉机器人</h1><ol><li>打开钉钉，创建一个钉钉群用于接收推送消息</li><li>点击群设置，选择“智能群助手”。</li><li>点击“添加机器人”，选择“自定义”。</li><li>设置机器人名称，并选择安全设置（推荐使用“自定义关键词”或“加签”）。</li><li>添加完成后，复制 Webhook 地址，这是后续代码中需要使用的接口地址。</li></ol><h1 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h1><h2 id="让机器人发送当前时间"><a href="#让机器人发送当前时间" class="headerlink" title="让机器人发送当前时间"></a>让机器人发送当前时间</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs perl">def run():<br><span class="hljs-comment"># 钉钉机器人 Webhook 地址</span><br>WEBHOOK_URL = <span class="hljs-string">&quot;https://oapi.dingtalk.com/robot/send?access_token=xxx&quot;</span>  <span class="hljs-comment"># 替换为您的 Webhook 地址</span><br><br>def send_dingtalk_message(content):<br>headers = &#123;<br><span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span><br>&#125;<br>data = &#123;<br><span class="hljs-string">&quot;msgtype&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br><span class="hljs-string">&quot;text&quot;</span>: &#123;<br><span class="hljs-string">&quot;content&quot;</span>: content<br>&#125;<br>&#125;<br>response = requests.post(WEBHOOK_URL, headers=headers, data=json.dumps(data))<br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;消息发送成功：&quot;</span>, response.json())<br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;消息发送失败：&quot;</span>, response.text)<br><br><span class="hljs-keyword">time</span> = datetime.now().strftime(<span class="hljs-string">&quot;<span class="hljs-variable">%Y</span>-<span class="hljs-variable">%m</span>-<span class="hljs-variable">%d</span> <span class="hljs-variable">%H</span>:<span class="hljs-variable">%M</span>:<span class="hljs-variable">%S</span>&quot;</span>)<br>message_content =<span class="hljs-string">&quot;hi\n现在是&quot;</span>+<span class="hljs-keyword">time</span>+<span class="hljs-string">&quot;\n&quot;</span><br>send_dingtalk_message(message_content)<br><br></code></pre></td></tr></table></figure><h2 id="让机器人每个工作日发送消息"><a href="#让机器人每个工作日发送消息" class="headerlink" title="让机器人每个工作日发送消息"></a>让机器人每个工作日发送消息</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs applescript">def is_weekday():<br>today = datetime.today().<span class="hljs-built_in">weekday</span>()  <span class="hljs-comment"># 获取今天是星期几（0=周一，6=周日）</span><br><span class="hljs-built_in">return</span> today &lt; <span class="hljs-number">5</span>  <span class="hljs-comment"># 如果今天是周一到周五，返回 True</span><br>def schedule_task():<br><span class="hljs-keyword">if</span> is_weekday():<br>schedule.<span class="hljs-keyword">every</span>().<span class="hljs-built_in">day</span>.<span class="hljs-keyword">at</span>(<span class="hljs-string">&quot;10:30&quot;</span>).do(<span class="hljs-built_in">run</span>)<br><span class="hljs-comment"># 保持程序运行</span><br><span class="hljs-keyword">while</span> True:<br>    schedule_task()  <span class="hljs-comment"># 每天检查是否为工作日并设置任务</span><br>    schedule.run_pending()  <span class="hljs-comment"># 检查是否有待运行的任务</span><br>    <span class="hljs-built_in">time</span>.sleep(<span class="hljs-number">60</span>)  <span class="hljs-comment"># 每分钟检查一次，避免频繁占用 CPU</span><br></code></pre></td></tr></table></figure><p>结合前期写的爬虫，即可实现定时推送重要数据，解放双手</p>]]></content>
    
    
    <categories>
      
      <category>自动化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+Github搭建免费博客（全网最细）</title>
    <link href="/2025/01/09/%E6%95%99%E7%A8%8B/"/>
    <url>/2025/01/09/%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="0-简介"><a href="#0-简介" class="headerlink" title="0.简介"></a>0.简介</h1><ul><li>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</li><li>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</li><li>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。（注意，在GitHub上没有存储你的md文件）</li></ul><h1 id="1-配置环境"><a href="#1-配置环境" class="headerlink" title="1.配置环境"></a>1.配置环境</h1><p>安装Node.js和git</p><ul><li><a href="https://nodejs.org/zh-cn">Node.js下载地址</a></li><li><a href="https://git-scm.com/downloads">Git下载地址</a></li></ul><h1 id="2-连接GitHub"><a href="#2-连接GitHub" class="headerlink" title="2.连接GitHub"></a>2.连接GitHub</h1><ol><li><a href="https://github.com/">注册GitHub账号</a></li><li>右键 -&gt; Git Bash Here , 设置用户名和邮箱（在自己电脑，随便找个地方，因为是全局<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;GitHub 用户名&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;GitHub 邮箱&quot;</span><br></code></pre></td></tr></table></figure></li><li>创建 SSH 密钥*：输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。获取生成了密钥。</li><li>添加密钥<br> 进入 C:\Users\用户名.ssh目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。<br> 登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。<br> Title 随便取个名字，粘贴复制的内容到 Key 中，点击 Add SSH key 完成添加。</li><li>验证连接：<br> 打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</li></ol><h1 id="3-创建-Github-仓库"><a href="#3-创建-Github-仓库" class="headerlink" title="3.创建 Github 仓库"></a>3.创建 Github 仓库</h1><p><img src="https://picx.zhimg.com/v2-67a8165154f4c5f4a6333e76e78ed815_1440w.jpg" alt="创建Github 仓库"></p><h1 id="4-安装-Hexo"><a href="#4-安装-Hexo" class="headerlink" title="4.安装 Hexo"></a>4.安装 Hexo</h1><ul><li>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。</li><li>使用 npm 一键安装 Hexo 博客程序<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure></li><li>初始化并安装所需组件：</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">hexo init      <span class="hljs-comment"># 初始化</span><br>npm <span class="hljs-keyword">install</span>    <span class="hljs-comment"># 安装组件</span><br></code></pre></td></tr></table></figure><ul><li>完成后依次输入下面命令，*启动本地服务器进行预览：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> g   <span class="hljs-comment"># 生成页面</span><br>hexo s   <span class="hljs-comment"># 启动预览</span><br></code></pre></td></tr></table></figure><ul><li>访问<code> http://localhost:4000</code>出现 Hexo 默认页面，本地博客安装成功</li></ul><h1 id="5-部署-Hexo-到-GitHub"><a href="#5-部署-Hexo-到-GitHub" class="headerlink" title="5.部署 Hexo 到 GitHub"></a>5.部署 Hexo 到 GitHub</h1><ol><li>首安装 hexo-deployer-git：</li></ol><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><ol start="2"><li>修改 _config.yml文件末尾的 Deployment 部分，修改成如下：<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@github.com:用户名/用户名.github.io.git<br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure></li></ol><p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p><p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p><h1 id="6-开始使用"><a href="#6-开始使用" class="headerlink" title="6.开始使用"></a>6.开始使用</h1><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。<br>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。以后每次发布文章都是这两条命令。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> g   <span class="hljs-comment"># 生成页面</span><br>hexo d   <span class="hljs-comment"># 部署发布</span><br></code></pre></td></tr></table></figure><p>在md文件的开头部分可以设置文章的标题、日期、分类、标签等。本篇文章的设置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hexo+Github搭建免费博客（全网最细）#</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2025-01-09 21:51:04</span><span class="hljs-comment"># 时间</span><br><span class="hljs-attr">toc:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 开启目录</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">搭建网站#</span> <span class="hljs-string">分类</span><br><span class="hljs-attr">tags:</span> <span class="hljs-string">hexo#</span> <span class="hljs-string">标签</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h2 id="网站设置"><a href="#网站设置" class="headerlink" title="网站设置"></a>网站设置</h2><p>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考<a href="https://hexo.io/zh-cn/docs/configuration">官方文档</a>按需要编辑。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li>Hexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 <code>&lt;!--more--&gt;</code> 进行分段。<br>该代码前面的内容会作为摘要显示，而后面的内容会替换为 “Read More” 隐藏起来。</li><li>修改配置文件的时候注意冒号后面要加空格</li><li>如果更改配置没有生效，<code>hexo cl</code>清理后重新部署</li><li>其他奇怪问题可以直接问AI</li></ol><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>参考主题官方文档按需要编辑。<br>例如<a href="https://fluid-dev.github.io/hexo-fluid-docs/start/">Fluid主题</a>。</p>]]></content>
    
    
    <categories>
      
      <category>搭建网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
